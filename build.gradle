plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

// 전역 변수 선언
ext {
    snippetsDir = file('build/generated-snippets') // 스니펫 경로 변수 설정
}

configurations {
    asciidoctorExt
}

dependencies {
    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // jackson
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

    // reflect
    implementation 'org.jetbrains.kotlin:kotlin-reflect'

    // h2
    runtimeOnly 'com.h2database:h2'

    // mysql
    runtimeOnly 'com.mysql:mysql-connector-j'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation "com.ninja-squad:springmockk:4.0.2"

    // restdocs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
    testImplementation 'io.rest-assured:spring-mock-mvc'
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

allOpen {
    annotation 'jakarta.persistence.Entity'
    annotation 'jakarta.persistence.MappedSuperclass'
    annotation 'jakarta.persistence.Embeddable'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    dependsOn test
    configurations 'asciidoctorExt'
    baseDirFollowsSourceFile()	// 다른 adoc 파일을 include 할 때 경로를 baseDir로 맞춘다.
    inputs.dir snippetsDir
    outputDir file('build/docs/asciidoc')

    sources {
        include("**/index.adoc") // html로 만들 adoc 파일 설정. 추가로 더 지정할 수 있음
    }
}

tasks.resolveMainClassName {
    dependsOn 'copyDocument'
}

// Task 추가
tasks.register('copyDocument', Copy) {
    from file("build/docs/asciidoc")
    into file("build/resources/main/static/docs") // 필요에 따라 templates로도 할 수 있음.

    include "index.html"

    rename "index.html", "api-docs.html"

    dependsOn asciidoctor
}

build {
    dependsOn copyDocument
}

bootJar {
    dependsOn copyDocument
}



